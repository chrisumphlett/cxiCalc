dplyr::group_by(data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup()
cxi <- a %>%
dplyr::group_by(data$question, .data$response_class)
cxi <- a %>%
dplyr::group_by(.data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count)
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(High), 0, as.numeric(High)),
Mid = if_else(is.na(Mid), 0, as.numeric(Mid)),
Low = if_else(is.na(Low), 0, as.numeric(Low)),
question_score = (High - Low) /
(High + Mid + Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
devtools::check()
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(High), 0, as.numeric(High)),
Mid = if_else(is.na(Mid), 0, as.numeric(Mid)),
Low = if_else(is.na(Low), 0, as.numeric(Low)),
question_score = (High - Low) /
(High + Mid + Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(.data$High), 0, as.numeric(High)),
Mid = if_else(is.na(Mid), 0, as.numeric(Mid)),
Low = if_else(is.na(Low), 0, as.numeric(Low)),
question_score = (High - Low) /
(High + Mid + Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(.data$High), 0, as.numeric(High)),
Mid = if_else(is.na(.data$Mid), 0, as.numeric(Mid)),
Low = if_else(is.na(.data$Low), 0, as.numeric(Low)),
question_score = (High - Low) /
(High + Mid + Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(.data$High), 0, as.numeric(High)),
Mid = if_else(is.na(.data$Mid), 0, as.numeric(Mid)),
Low = if_else(is.na(.data$Low), 0, as.numeric(Low)),
question_score = (.data$High - .data$Low) /
(.data$High + .data$Mid + .data$Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(.data$High), 0, as.numeric(.data$High)),
Mid = if_else(is.na(.data$Mid), 0, as.numeric(Mid)),
Low = if_else(is.na(.data$Low), 0, as.numeric(Low)),
question_score = (.data$High - .data$Low) /
(.data$High + .data$Mid + .data$Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(.data$High), 0, as.numeric(.data$High)),
Mid = if_else(is.na(.data$Mid), 0, as.numeric(.data$Mid)),
Low = if_else(is.na(.data$Low), 0, as.numeric(.data$Low)),
question_score = (.data$High - .data$Low) /
(.data$High + .data$Mid + .data$Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
devtools::check()
devtools::check()
#' Tidy Calculation of Customer Experience Index trends by group
#'
#' Simplifies the calculation of Customer Experience Index (CXi) trends over time from raw survey
#' data within the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' The trend version of the function allows you to specify one column as a date over which to
#' trend the data. This allows quick filtering to eliminate groupings that fail to meet
#' user-specified thresholds for average or minimum survey counts per time period.
#'
#' The resulting data set is set up for creating faceted line plots using ggplot2.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param trend_var Column that represents an element of time, eg week number, date, month & year.
#' @param min_surveys Minimum surveys found in every period for each group to be included
#' @param avg_surveys AVerage surveys found in every period for each group to be included
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables over
#' the time variable.
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_trend <- function(survey_data, trend_var, min_surveys = 1, avg_surveys = 0, ...) {
survey_transpose <- survey_transpose(survey_data, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., {{trend_var}}, .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(.data$High), 0, as.numeric(.data$High)),
Mid = if_else(is.na(.data$Mid), 0, as.numeric(.data$Mid)),
Low = if_else(is.na(.data$Low), 0, as.numeric(.data$Low)),
question_score = (.data$High - .data$Low) /
(.data$High + .data$Mid + .data$Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(..., {{trend_var}}) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
cxi3 <- cxi2 %>%
dplyr::group_by(...) %>%
dplyr::summarise(avg_survey_ct = mean(.data$survey_count),
min_survey_ct = min(.data$survey_count)) %>%
dplyr::ungroup() %>%
dplyr::inner_join(cxi2) %>%
dplyr::filter(.data$avg_survey_ct >= avg_surveys, .data$min_survey_ct >= min_surveys)
return(cxi3)
}
cxi_sample_dat <- tibble::tribble(
~needs, ~ease, ~emotion,        ~date, ~grp,
2,     4,        1, "12/13/2019",  "B",
2,     1,        1, "12/12/2019",  "A",
5,     1,        4,  "12/9/2019",  "B",
3,     5,        2, "12/13/2019",  "B",
5,     4,        5, "12/12/2019",  "B",
5,     3,        5, "12/13/2019",  "A",
2,     2,        1, "12/10/2019",  "B",
1,     3,        2, "12/13/2019",  "A",
2,     4,        5, "12/10/2019",  "A",
2,     3,        1, "12/10/2019",  "A",
1,     5,        2, "12/10/2019",  "B",
3,     1,        2, "12/12/2019",  "B",
4,     1,        3, "12/12/2019",  "B",
1,     2,        5,  "12/9/2019",  "A",
2,     1,        5,  "12/9/2019",  "A",
1,     5,        1, "12/13/2019",  "B",
3,     3,        1, "12/10/2019",  "B",
2,     3,        4, "12/12/2019",  "B",
4,     4,        3, "12/10/2019",  "A",
1,     4,        4, "12/11/2019",  "A"
) %>% mutate(date = as.Date(date, format = "%m/%d/%Y"), id = row_number())
cxi_calc(cxi_sample_dat)
cxi_trend(cxi_sample_dat, date, min_surveys = 1, avg_surveys = 0)
#' Transpose survey data to prep for CXi calculation
#'
#' Transposes survey data from wide to long to prepare for tidy calculation of CXi
#'
#' This function is called by other functions in the package that do the final CXi
#' calculations.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with one row per survey response for each of the three CXi questions
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#' @noRd
survey_transpose <- function(survey_data, cx_high = 4, cx_low = 2, ...) {
survey_transpose <- {{survey_data}} %>%
# dplyr::select(survey_id, ..., needs, ease, emotion) %>%
tidyr::pivot_longer(cols = c(.data$needs, .data$ease, .data$emotion),
names_to = "question", values_to = "response", values_ptypes = list(val = 'character')) %>%
dplyr::mutate(response_class = case_when(
response >= cx_high ~ "High",
response <= cx_low ~ "Low",
TRUE ~ "Mid")) %>%
dplyr::select(-.data$response)
return(survey_transpose)
}
#' Tidy Calculation of Customer Experience Index
#'
#' Simplifies the calculation of Customer Experience Index (CXi) from raw survey data within
#' the tidyverse framework.
#'
#' Customer Experience Index is a metric created by Forrester to help companies systematically
#' measure customer experience in a way that their research has found is connected to
#' improving customer loyalty. More information can be found at https://go.forrester.com/analytics/cx-index/
#'
#' The calculation across an entire sample of surveys is simple. A customer experience
#' manager may want to calculate CXi across many different dimensions and filtering
#' in different ways; the functions in this package utilize the tidy framework to streamline
#' calculating CXi along as many dimensions as desired.
#'
#' @param survey_data Raw survey data. Needs to be one row per survey with the three CXi question
#' responses having column names of needs, ease and emotion
#' @param ... optional colunns by which to group the CXi calculation. There is no limit to
#' the number of grouping variables chosen. Too many will likely result in CXi calculations
#' that are too fragmented / based on very small survey counts.
#'
#' @return Data frame with CXi and survey count for each combination of the grouping variables
#'
#' @import dplyr
#' @importFrom magrittr "%>%"
#' @import tidyr
#'
#' @export
cxi_calc <- function(survey_data, cx_high = 4, cx_low = 2,...) {
cx_high2 <- cx_high
cx_low2 <- cx_low
survey_transpose <- survey_transpose(survey_data, cx_high = cx_high2, cx_low = cx_low2, ...)
cxi <- survey_transpose %>%
dplyr::group_by(..., .data$question, .data$response_class) %>%
dplyr::summarise(count = n()) %>%
dplyr::ungroup() %>%
tidyr::spread(.data$response_class, count) %>%
dplyr::mutate(High = if_else(is.na(.data$High), 0, as.numeric(.data$High)),
Mid = if_else(is.na(.data$Mid), 0, as.numeric(.data$Mid)),
Low = if_else(is.na(.data$Low), 0, as.numeric(.data$Low)),
question_score = (.data$High - .data$Low) /
(.data$High + .data$Mid + .data$Low) * 100)
cxi2 <- cxi %>%
dplyr::group_by(...) %>%
dplyr::summarise(cxi = mean(.data$question_score),
survey_count = sum(.data$High + .data$Low + .data$Mid) / 3) %>%
dplyr::ungroup()
return(cxi2)
}
cxi_calc(cxi_sample_dat)
cxi_calc(cxi_sample_dat, cx_high = 3)
cxi_calc(cxi_sample_dat, cx_high = 5)
